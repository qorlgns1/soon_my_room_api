name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set environment variables
        run: |
          cat > .env << 'EOL'
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          AWS_S3_REGION=${{ secrets.AWS_S3_REGION }}
          AWS_S3_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }}
          AWS_S3_SECRET_KEY=${{ secrets.AWS_S3_SECRET_KEY }}
          AWS_S3_BUCKET_PROFILES=${{ secrets.AWS_S3_BUCKET_PROFILES }}
          AWS_S3_BUCKET_POSTS=${{ secrets.AWS_S3_BUCKET_POSTS }}
          AWS_S3_BUCKET_PRODUCTS=${{ secrets.AWS_S3_BUCKET_PRODUCTS }}
          AWS_S3_BUCKET_DEFAULT=${{ secrets.AWS_S3_BUCKET_DEFAULT }}
          SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          SENTRY_ORG=${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT=${{ secrets.SENTRY_PROJECT }}
          CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
          EOL

      - name: Check for empty environment variables
        run: |
          echo "Checking for empty environment variables..."
          while IFS='=' read -r key value || [ -n "$key" ]; do
            if [[ -z "$key" || -z "$value" ]]; then
              echo "Error: $key is missing or empty!" >&2
              exit 1
            fi
          done < .env

      - name: Create Sentry release
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        with:
          environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
          release: ${{ github.sha }}
          ignore_missing: true

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"
          cache: "gradle"

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Apply Spotless
        run: ./gradlew spotlessApply

      - name: Run tests
        run: ./gradlew test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/soon-my-room-api:${{ github.sha }}
          build-args: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Copy env file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ".env"
          target: "~/workspace/soon_my_room_api/"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 배포 스크립트 실행
            ~/workspace/soon_my_room_deploy/soon_my_room_api_deploy.sh ${{ github.sha }} ${{ secrets.DOCKER_HUB_USERNAME }}
