name: CI/CD Pipeline for Soon My Room API

on:
  push:
    branches: [main, develop] # develop과 main 브랜치 push 시 실행

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.get_tag.outputs.tag }}
      branch_name: ${{ steps.get_branch.outputs.branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get branch name
        id: get_branch
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT

      - name: Get Image Tag (Commit SHA)
        id: get_tag
        run: echo "tag=${{ steps.get_branch.outputs.branch }}-${{ github.sha }}" >> $GITHUB_OUTPUT # 브랜치명-sha 조합

      - name: Create Sentry release
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        with:
          environment: ${{ steps.get_branch.outputs.branch == 'main' && 'production' || 'development' }}
          version: ${{ steps.get_tag.outputs.tag }} # 이미지 태그와 동일한 버전 사용

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"
          cache: "gradle"

      - name: Build with Gradle
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: ./gradlew build -x test

      - name: Apply Spotless
        run: ./gradlew spotlessApply

      # 의존성 새로고침도 함께 수행
      - name: Clean Gradle Cache # 테스트 실행 전에 캐시 정리
        run: |
          rm -rf $HOME/.gradle/caches/
          ./gradlew clean --refresh-dependencies

      - name: Run tests
        env:
          # 테스트 시 PostgreSQL 연결 정보 대신 H2 설정을 사용하도록 관련 환경 변수를 명시적으로 비워줍니다.
          DB_URL: ""
          DB_USERNAME: ""
          DB_PASSWORD: ""
        run: ./gradlew test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/soon-my-room-api:${{ steps.get_tag.outputs.tag }}
          build-args: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ needs.build.outputs.branch_name == 'main' && 'production' || 'development' }} # GitHub Environments 사용
    steps:
      - name: Set Environment Variables
        id: set_env
        run: |
          if [[ "${{ needs.build.outputs.branch_name }}" == "main" ]]; then
            echo "EC2_HOST=${{ secrets.PROD_EC2_HOST }}" >> $GITHUB_ENV
            echo "EC2_USERNAME=${{ secrets.PROD_EC2_USERNAME }}" >> $GITHUB_ENV
            echo "EC2_SSH_KEY=${{ secrets.PROD_EC2_SSH_KEY }}" >> $GITHUB_ENV
            echo "ENV_FILE_CONTENT=${{ secrets.PROD_ENV_FILE_CONTENT }}" >> $GITHUB_ENV # Secrets에 .env.production.local 내용 저장 필요
            echo "ENV_FILE_NAME=.env.production.local" >> $GITHUB_ENV
            echo "COMPOSE_FILE_NAME=docker-compose.prod.yml" >> $GITHUB_ENV
            echo "NGINX_CONF_NAME=prod-soon-my-room.kihoonbae.store.conf" >> $GITHUB_ENV
            echo "NGINX_SERVICE_NAME=nginx-prod" >> $GITHUB_ENV
            echo "SERVICE_PREFIX=prod" >> $GITHUB_ENV
            echo "BLUE_PORT=9000" >> $GITHUB_ENV
            echo "GREEN_PORT=9001" >> $GITHUB_ENV
          else # develop branch
            echo "EC2_HOST=${{ secrets.DEV_EC2_HOST }}" >> $GITHUB_ENV
            echo "EC2_USERNAME=${{ secrets.DEV_EC2_USERNAME }}" >> $GITHUB_ENV
            echo "EC2_SSH_KEY=${{ secrets.DEV_EC2_SSH_KEY }}" >> $GITHUB_ENV
            echo "ENV_FILE_CONTENT=${{ secrets.DEV_ENV_FILE_CONTENT }}" >> $GITHUB_ENV # Secrets에 .env.development.local 내용 저장 필요
            echo "ENV_FILE_NAME=.env.development.local" >> $GITHUB_ENV
            echo "COMPOSE_FILE_NAME=docker-compose.dev.yml" >> $GITHUB_ENV
            echo "NGINX_CONF_NAME=dev-soon-my-room.kihoonbae.store.conf" >> $GITHUB_ENV
            echo "NGINX_SERVICE_NAME=nginx-dev" >> $GITHUB_ENV
            echo "SERVICE_PREFIX=dev" >> $GITHUB_ENV
            echo "BLUE_PORT=8000" >> $GITHUB_ENV
            echo "GREEN_PORT=8001" >> $GITHUB_ENV
          fi
          echo "IMAGE_TAG=${{ needs.build.outputs.image_tag }}" >> $GITHUB_ENV

      - name: Create .env file locally
        run: echo "${{ env.ENV_FILE_CONTENT }}" > ${{ env.ENV_FILE_NAME }}

      - name: Copy env file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_SSH_KEY }}
          source: "${{ env.ENV_FILE_NAME }}"
          target: "~/workspace/soon_my_room_api/"

      - name: Check current deployment status
        id: check_status
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            NGINX_CONF_PATH="~/workspace/reverse-proxy/nginx/conf.d/${{ env.NGINX_CONF_NAME }}"
            SERVICE_PREFIX="${{ env.SERVICE_PREFIX }}"
            BLUE_SERVICE="${SERVICE_PREFIX}-app-blue"
            GREEN_SERVICE="${SERVICE_PREFIX}-app-green"

            # 현재 Nginx가 바라보는 서비스 확인 (Blue를 기본으로 가정)
            CURRENT_SERVICE=$BLUE_SERVICE
            TARGET_SERVICE=$GREEN_SERVICE
            CURRENT_PORT=${{ env.BLUE_PORT }}
            TARGET_PORT=${{ env.GREEN_PORT }}

            if grep -q "proxy_pass http://${GREEN_SERVICE}:9000" $NGINX_CONF_PATH; then
              CURRENT_SERVICE=$GREEN_SERVICE
              TARGET_SERVICE=$BLUE_SERVICE
              CURRENT_PORT=${{ env.GREEN_PORT }}
              TARGET_PORT=${{ env.BLUE_PORT }}
            fi

            echo "Current Service: $CURRENT_SERVICE (Port: $CURRENT_PORT)"
            echo "Target Service: $TARGET_SERVICE (Port: $TARGET_PORT)"

            echo "current_service=${CURRENT_SERVICE}" >> $GITHUB_OUTPUT
            echo "target_service=${TARGET_SERVICE}" >> $GITHUB_OUTPUT
            echo "current_port=${CURRENT_PORT}" >> $GITHUB_OUTPUT
            echo "target_port=${TARGET_PORT}" >> $GITHUB_OUTPUT

      - name: Deploy new version
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            cd ~/workspace/reverse-proxy
            export IMAGE_TAG=${{ env.IMAGE_TAG }} # Docker Compose 파일 내 변수 사용 위함
            TARGET_SERVICE=${{ steps.check_status.outputs.target_service }}

            echo "Pulling new image: $IMAGE_TAG"
            docker-compose -f ${{ env.COMPOSE_FILE_NAME }} pull $TARGET_SERVICE

            echo "Starting new container: $TARGET_SERVICE"
            docker-compose -f ${{ env.COMPOSE_FILE_NAME }} up -d --no-deps $TARGET_SERVICE

            echo "New container started. Waiting for health check..."

      - name: Health check
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            TARGET_PORT=${{ steps.check_status.outputs.target_port }}
            echo "Performing health check on port $TARGET_PORT..."
            for i in {1..30}; do
              HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$TARGET_PORT/swagger-ui/index.html)
              if [ "$HEALTH_CHECK" == "200" ]; then
                echo "Health check successful!"
                exit 0
              fi
              echo "Health check attempt $i failed with status $HEALTH_CHECK. Retrying in 2 seconds..."
              sleep 2
            done
            echo "Health check failed after 30 attempts."
            exit 1

      - name: Switch Nginx and stop old container
        # 헬스 체크 성공 시에만 실행
        if: success()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            NGINX_CONF_PATH="~/workspace/reverse-proxy/nginx/conf.d/${{ env.NGINX_CONF_NAME }}"
            CURRENT_SERVICE=${{ steps.check_status.outputs.current_service }}
            TARGET_SERVICE=${{ steps.check_status.outputs.target_service }}
            NGINX_SERVICE=${{ env.NGINX_SERVICE_NAME }}
            COMPOSE_FILE=${{ env.COMPOSE_FILE_NAME }}
            WORKSPACE_DIR="~/workspace/reverse-proxy"

            echo "Switching Nginx to target service: $TARGET_SERVICE"
            sudo cp $NGINX_CONF_PATH ${NGINX_CONF_PATH}.backup

            # proxy_pass 를 TARGET 서비스 이름으로 변경
            sudo sed -i "s|proxy_pass http://${CURRENT_SERVICE}:9000|proxy_pass http://${TARGET_SERVICE}:9000|g" $NGINX_CONF_PATH

            echo "Testing Nginx configuration..."
            cd $WORKSPACE_DIR
            if docker-compose -f $COMPOSE_FILE exec $NGINX_SERVICE nginx -t; then
              echo "Nginx configuration test successful. Reloading Nginx..."
              docker-compose -f $COMPOSE_FILE exec $NGINX_SERVICE nginx -s reload

              echo "Traffic switched to $TARGET_SERVICE. Stopping old container $CURRENT_SERVICE after 30 seconds..."
              sleep 30
              docker-compose -f $COMPOSE_FILE stop $CURRENT_SERVICE
              echo "Old container $CURRENT_SERVICE stopped."
            else
              echo "Nginx configuration test failed. Rolling back changes..."
              sudo mv ${NGINX_CONF_PATH}.backup $NGINX_CONF_PATH
              echo "Stopping target container $TARGET_SERVICE due to failed Nginx test."
              docker-compose -f $COMPOSE_FILE stop $TARGET_SERVICE
              docker-compose -f $COMPOSE_FILE rm -f $TARGET_SERVICE # 실패한 컨테이너 삭제
              exit 1
            fi

      - name: Clean up old images # 항상 실행되도록 수정
        if: always()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            echo "Cleaning up old docker images..."
            docker image prune -af --filter "until=168h"
